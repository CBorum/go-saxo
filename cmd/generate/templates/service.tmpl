// This file is autogenerated by cmd/generate/main.go
package {{ .ServiceGroupName }}

import (
    "fmt"

	"github.com/cborum/go-saxo"
)
{{ $DocsBaseUrl := .DocsBaseUrl -}}
{{ $ServiceGroupName := .ServiceGroupName -}}
{{ $includeApiVersion := .SaxoData.Includeapiversion -}}
{{ $apiVersion := .SaxoData.Apiversion -}}
{{ range .SaxoData.Endpoints }}
{{ printf "%s %s%s" "//" $DocsBaseUrl .Refdocsurl }}{{ $responseType := (getResponseType .Key $ServiceGroupName) }}
func {{ .Key }}{{if $includeApiVersion}}{{ $apiVersion }}{{ end }}({{ getFuncParameters .Parameters .Key $includeApiVersion $apiVersion -}}) ({{ $responseType }}, error) {
    resp, err := saxo.GetClient().DoRequest("{{ .Httpmethod }}", "{{ .URL }}", nil) {{/* TODO sub query params, do json body */}}
    if err != nil {
        return nil, err
    } else if sc := resp.Response().StatusCode; sc >= 300 {
		return nil, fmt.Errorf("unexpected status code %d", sc)
	}

    {{- if hasResponseType .Key $ServiceGroupName }}
    respJson := &{{ sanitize $responseType }}{}
    err = resp.ToJSON(respJson)
    if err != nil {
        return nil, err
    }
    return respJson, nil
    {{- else }}
    return resp.Bytes(), nil {{/* TODO return map[stirng]interface{} */}}
    {{- end }}
}

{{ if hasNonRouteParameters .Parameters -}}
type {{ .Key -}}{{if $includeApiVersion}}{{ $apiVersion }}{{end}}Params struct { {{ range .Parameters }}
    {{ if isNonRoute .Origin }}{{ sanitize .Name }} {{ getParamType .Datatype }}{{ if .Isrequired }} // required{{- end }}{{ end -}} 
{{- end }} 
}
{{ end }}
{{- end }}