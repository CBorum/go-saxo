// This file is autogenerated by cmd/generate/main.go
package trading

import (
	"github.com/cborum/go-saxo"
)

// https://www.developer.saxo/openapi/referencedocs/trade/v1/infoprices/getinfopriceasync/eee3cc82474270ca79836aa7d8b1e923
func GetInfoPriceAsync(params *GetInfoPriceAsyncParams) (*GetInfoPriceAsyncResponse, error) {
	url := "https://gateway.saxobank.com/sim/openapi/trade/v1/infoprices/?Uic={Uic}&AccountKey={AccountKey}&AssetType={AssetType}&Amount={Amount}&ForwardDate={ForwardDate}&ExpiryDate={ExpiryDate}&StrikePrice={StrikePrice}&OrderAskPrice={OrderAskPrice}&OrderBidPrice={OrderBidPrice}&LowerBarrier={LowerBarrier}&UpperBarrier={UpperBarrier}&PutCall={PutCall}&FieldGroups={FieldGroups}&AmountType={AmountType}&ToOpenClose={ToOpenClose}&QuoteCurrency={QuoteCurrency}"
	url = saxo.PrepareUrlParams(url, params)
	resp, err := saxo.GetClient().DoRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	respJson := &GetInfoPriceAsyncResponse{}
	err = resp.ToJSON(respJson)
	if err != nil {
		return nil, err
	}
	return respJson, nil
}

type GetInfoPriceAsyncParams struct {
	AccountKey    string  `url:",omitempty"`
	Amount        float64 `url:",omitempty"`
	AmountType    string  `url:",omitempty"`
	AssetType     string  // required
	ExpiryDate    string  `url:",omitempty"`
	FieldGroups   string  `url:",omitempty"`
	ForwardDate   string  `url:",omitempty"`
	LowerBarrier  float64 `url:",omitempty"`
	OrderAskPrice float64 `url:",omitempty"`
	OrderBidPrice float64 `url:",omitempty"`
	PutCall       string  `url:",omitempty"`
	QuoteCurrency bool    `url:",omitempty"`
	StrikePrice   float64 `url:",omitempty"`
	ToOpenClose   string  `url:",omitempty"`
	Uic           int64   // required
	UpperBarrier  float64 `url:",omitempty"`
}

// https://www.developer.saxo/openapi/referencedocs/trade/v1/infoprices/getinfopricelistasync/2eaaceb6373a7eff36c5f04f345cabe0
func GetInfoPriceListAsync(params *GetInfoPriceListAsyncParams) (*GetInfoPriceListAsyncResponse, error) {
	url := "https://gateway.saxobank.com/sim/openapi/trade/v1/infoprices/list/?Uics={Uics}&AccountKey={AccountKey}&AssetType={AssetType}&Amount={Amount}&ForwardDate={ForwardDate}&ExpiryDate={ExpiryDate}&StrikePrice={StrikePrice}&OrderAskPrice={OrderAskPrice}&OrderBidPrice={OrderBidPrice}&LowerBarrier={LowerBarrier}&UpperBarrier={UpperBarrier}&PutCall={PutCall}&FieldGroups={FieldGroups}&AmountType={AmountType}&ForwardDateNearLeg={ForwardDateNearLeg}&ForwardDateFarLeg={ForwardDateFarLeg}&ToOpenClose={ToOpenClose}&QuoteCurrency={QuoteCurrency}"
	url = saxo.PrepareUrlParams(url, params)
	resp, err := saxo.GetClient().DoRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	respJson := &GetInfoPriceListAsyncResponse{}
	err = resp.ToJSON(respJson)
	if err != nil {
		return nil, err
	}
	return respJson, nil
}

type GetInfoPriceListAsyncParams struct {
	AccountKey         string  `url:",omitempty"`
	Amount             float64 `url:",omitempty"`
	AmountType         string  `url:",omitempty"`
	AssetType          string  // required
	ExpiryDate         string  `url:",omitempty"`
	FieldGroups        string  `url:",omitempty"`
	ForwardDate        string  `url:",omitempty"`
	ForwardDateFarLeg  string  `url:",omitempty"`
	ForwardDateNearLeg string  `url:",omitempty"`
	LowerBarrier       float64 `url:",omitempty"`
	OrderAskPrice      float64 `url:",omitempty"`
	OrderBidPrice      float64 `url:",omitempty"`
	PutCall            string  `url:",omitempty"`
	QuoteCurrency      bool    `url:",omitempty"`
	StrikePrice        float64 `url:",omitempty"`
	ToOpenClose        string  `url:",omitempty"`
	Uics               string  // required
	UpperBarrier       float64 `url:",omitempty"`
}

// https://www.developer.saxo/openapi/referencedocs/trade/v1/infoprices/addsubscriptionasync/38ca8a186fa551f5c2e16e9d7a25a7e2
func AddSubscriptionAsyncInfoPrices(params *AddSubscriptionAsyncInfoPricesParams) (*AddSubscriptionAsyncInfoPricesResponse, error) {
	url := "https://gateway.saxobank.com/sim/openapi/trade/v1/infoprices/subscriptions"
	resp, err := saxo.GetClient().DoRequest("POST", url, params)
	if err != nil {
		return nil, err
	}
	respJson := &AddSubscriptionAsyncInfoPricesResponse{}
	err = resp.ToJSON(respJson)
	if err != nil {
		return nil, err
	}
	return respJson, nil
}

type AddSubscriptionAsyncInfoPricesParams struct {
	Arguments   string // required
	ContextId   string // required
	Format      string
	ReferenceId string // required
	RefreshRate int64
	Tag         string
}

// https://www.developer.saxo/openapi/referencedocs/trade/v1/infoprices/deletesubscriptions/ba6b3598c3f0315f354250d65a8afb86
func DeleteSubscriptionsInfoPrices(contextid string, params *DeleteSubscriptionsInfoPricesParams) ([]byte, error) {
	url := "https://gateway.saxobank.com/sim/openapi/trade/v1/infoprices/subscriptions/{ContextId}/?Tag={Tag}"
	url = saxo.PrepareUrlRoute(url, saxo.RP("{ContextId}", contextid))
	url = saxo.PrepareUrlParams(url, params)
	resp, err := saxo.GetClient().DoRequest("DELETE", url, nil)
	if err != nil {
		return nil, err
	}
	return resp.Bytes(), nil
}

type DeleteSubscriptionsInfoPricesParams struct {
	Tag string `url:",omitempty"`
}

// https://www.developer.saxo/openapi/referencedocs/trade/v1/infoprices/deletesubscription/f0c8e65d8cf01479377d1d81786b9ab4
func DeleteSubscriptionInfoPrices(contextid string, referenceid string) ([]byte, error) {
	url := "https://gateway.saxobank.com/sim/openapi/trade/v1/infoprices/subscriptions/{ContextId}/{ReferenceId}"
	url = saxo.PrepareUrlRoute(url, saxo.RP("{ContextId}", contextid), saxo.RP("{ReferenceId}", referenceid))
	resp, err := saxo.GetClient().DoRequest("DELETE", url, nil)
	if err != nil {
		return nil, err
	}
	return resp.Bytes(), nil
}
